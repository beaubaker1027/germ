{"version":3,"sources":["theme.ts","components/container.ts","components/inputs.ts","assets/logo.svg","components/images.ts","components/clickables.ts","pages/common/splash.tsx","components/header.tsx","components/footer.tsx","components/layout.ts","assets/filter.svg","components/search.tsx","lib/debug.ts","components/list.tsx","components/plantlistitem.tsx","lib/plant.ts","pages/common/dashboard.tsx","state/info.ts","lib/matching.ts","pages/plant/info.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","width","colors","primary","secondary","background","Column","styled","div","attrs","className","Background","props","Input","input","Icon","i","icon","LargeLogo","img","src","Logo","SmallLogo","Link","L","button","active","CenteredBackground","Splash","entryLink","to","components","Container","header","Title","span","program","Recompose","C","href","a","footer","Body","SearchBox","key","placeholder","FilterIcon","ListBox","List","Component","listItem","list","map","item","ListItemBox","PlantListItem","id","name","plantStorage","empty","constant","hasId","plant","pipe","R","O","val","findById","plants","A","getPlants","getItem","IO","E","flow","parse","json","stringify","value","setItem","debug","F","process","isDev","S","equals","trace","msg","B","Header","Footer","SearchBar","ListItem","reducers","enhance","undefined","filterCurrentList","searchTerm","P","tag","tags","componentDidMount","e","_","setError","this","setItems","currentList","searchText","items","onChange","setSearchText","target","LOADING","FETCHED","ERROR","loading","Lens","fromProp","fetched","error","defaultState","info","modify","payload","infoReducer","state","action","patterns","d","type","match","dispatch","params","withRouter","style","color","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d583ff9.chunk.js","sourcesContent":["export interface Theme {\n    readonly width: number;\n    readonly colors: {\n        readonly primary: string;\n        readonly secondary: string;\n        readonly background: string;\n    };\n}\n\nconst theme:Theme = {\n    width: 500,\n    colors: {\n        primary: '#00FFFF',\n        secondary: '#F2F2F2',\n        background: '#000000'\n    }\n}\n\nexport default theme;","import styled from 'styled-components';\n\n\nexport const Row = styled.div.attrs({\n    className: 'flex flex-row flex-auto w100 h-100'\n})``;\n\nexport const Column = styled.div.attrs({\n    className: 'flex flex-column flex-auto w100 h-100'\n})``;\n\nexport const Background = styled(Column)`\n    background-color: ${props => props.theme.colors.background};\n`;\n\n","import styled from 'styled-components';\n\nexport const Input = styled.input.attrs({\n    className: 'pa2 outline-0 b0 '\n})`\n    width: 200px;\n    background-color: ${props => props.theme.colors.background};\n    color: ${props => props.theme.colors.primary};\n    border-width: 0px;\n`;","export default __webpack_public_path__ + \"static/media/logo.b9c9a0c2.svg\";","import styled from 'styled-components';\nimport Logo from '../assets/logo.svg';\n\ninterface Icon {\n    icon: string;\n}\n\nexport const Icon = styled.i.attrs({\n    className: 'pa2'\n})<Icon>`\n\nbackground: url(${props => props.icon});\nbackground-size: contain;\nbackground-position: center;\nbackground-repeat: no-repeat;\n`;\n\nexport const LargeLogo = styled.img.attrs({\n    src: Logo\n})`height: 200px;`;\n\nexport const SmallLogo = styled(LargeLogo)`height: 16px;`;","import styled from 'styled-components';\nimport { Link as L } from 'react-router-dom';\n\nexport const Link = styled(L)`\n    color: ${props => props.theme.colors.secondary};\n    text-decoration: none;\n\n    &:hover {\n        opacity: 0.75;\n    }\n`;\n\ninterface Pill {\n    active?: boolean;\n}\nexport const Pill = styled.button.attrs({\n    className: 'dib ph3 pv1 br-pill ba bw1 ma1'\n})<Pill>`\n    background-color: ${props => \n        props.active \n        ? props.theme.colors.primary \n        : props.theme.colors.secondary };\n    outline: none;\n\n    &:hover {\n        opacity: 0.75;\n    }\n    &:active {\n        opacity: 0.5;\n    }\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { LargeLogo, Link, Background } from '../../components';\n\n\nconst Logo = styled(LargeLogo)`\n    margin-bottom: 45px;\n`;\n\nconst CenteredBackground = styled(Background).attrs<{className: string}>(props => ({\n    className: `items-center justify-center ${props.className}`\n}))``;\n\nconst entryText = 'Get Started';\nconst defaultEntryLink = '/plants';\n\ninterface Props {\n    entryLink?: string;\n}\n\nfunction Splash({ \n    entryLink = defaultEntryLink\n}:Props){\n    return (\n        <CenteredBackground>\n            <Logo/>\n            <Link to={entryLink}>{entryText}</Link>\n        </CenteredBackground>\n    )\n}\n\nexport default Splash;\n\n//3:07:00 ZABOOMAFOO CEREMOR Gamedev or Modding","import React from 'react';\nimport * as Recompose from 'recompose';\nimport styled from 'styled-components';\nimport { SmallLogo } from './';\n\ninterface Props extends React.PropsWithChildren<unknown>{\n    C: Components;\n}\n\ninterface Components {\n    Container: typeof Container;\n    SmallLogo: typeof SmallLogo;\n    Title: typeof Title;\n}\nconst Container = styled.header.attrs({\n    className: 'flex ph1 pv2 items-center'\n})``;\n\nconst Title = styled.span.attrs({\n    className: 'pl1'\n})`\n    color: #f2f2f2;\n`;\n\nconst components: Components = {\n    Container,\n    SmallLogo,\n    Title\n};\n\nfunction header(props: Props) {\n    return (\n        <props.C.Container>\n            <a href='/'>\n                <props.C.SmallLogo/>\n            </a>\n            <props.C.Title>\n                GERM\n            </props.C.Title>\n        </props.C.Container>\n    );\n};\n\nconst program = Recompose.compose<Props, unknown>(\n    Recompose.withProps({\n        C: components\n    })\n)\n\nexport default program(header);","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.header.attrs({\n    className: 'flex ph1 pv2 items-center justify-end'\n})``;\n\nconst Link = styled.a.attrs({\n    href: 'https://github.com/beaubaker1027/germ',\n    className: 'pl1 no-underline'\n})`\n    color: ${props => props.theme.colors.secondary};\n`;\n\nfunction footer() {\n    return (\n        <Container>\n            <Link>Github</Link>\n        </Container>\n    );\n};\n\nexport default footer;","import styled from 'styled-components';\n\nexport const Column = styled.div.attrs({\n    className: 'flex flex-column ph2'\n})``;\n\nexport const Row = styled.div.attrs({\n    className: 'flex ph2'\n})`\n`;\n\nexport const Body = styled.div.attrs({\n    className: 'flex flex-column flex-auto'\n})``;","export default __webpack_public_path__ + \"static/media/filter.5792311d.svg\";","import React from 'react';\nimport * as Recompose from 'recompose';\nimport styled from 'styled-components';\nimport { Input, Icon } from '.';\nimport FilterIcon from '../assets/filter.svg';\n\n// Interfaces\ninterface Props extends React.PropsWithChildren<unknown>, \n                        Omit<\n                            React.InputHTMLAttributes<HTMLInputElement>, \n                            'className' | 'ref' | 'children' | 'as'\n                        >{\n}\n// Local Components\nconst SearchBox = styled.div.attrs({\n    className: 'dib'\n})`\n    border-style: solid;\n    border-color: ${props => props.theme.colors.primary};\n    border-width: 0px 0px 1px 0px;\n`;\n\n// Defaults\n\nconst defaultPlaceholder = 'Search by Name or Tag';\n\n// Component\nfunction SearchBar(props:Props ) {\n    return (\n        <SearchBox>\n            <Input {...props}/>\n            <Icon icon={FilterIcon}/>\n        </SearchBox>\n    )\n};\n\n\nconst program = Recompose.compose<Props, Props>(\n    Recompose.defaultProps({\n        placeholder: defaultPlaceholder\n    })\n);\n\nexport default program(SearchBar);","import * as S from 'fp-ts/string';\nimport * as C from 'fp-ts/Console';\nimport * as O from 'fp-ts/Option';\nimport * as IO from 'fp-ts/IO';\nimport * as B from 'fp-ts/boolean';\nimport * as P from 'fp-ts/Predicate';\nimport * as F from 'fp-ts/function';\n\ntype Debug = boolean;\ntype Msg = Error | String;\n\ninterface get {\n    (k: string): IO.IO<O.Option<string>>;\n}\nconst get:get = (key) => \n    F.pipe(\n        process.env[key],\n        O.fromNullable,\n        IO.of\n    )\n\nexport const debug = get('NODE_ENV');\n\nconst isDev = F.pipe(\n    debug,\n    IO.map(\n        O.fold(\n            F.constFalse,\n            val => S.Eq.equals('development', val)\n        )\n    )\n);\n\ninterface trace {\n    (msg: Msg): void;\n}\n\n\nexport const trace:trace = F.flow(\n    (msg) => \n        B.fold(\n            F.constVoid, \n            C.error(msg)\n        )(isDev())\n);","import React from 'react';\nimport styled from 'styled-components';\n\n// Interfaces\ninterface Props<I> extends React.PropsWithChildren<unknown> {\n    listItem: ({ item }: { item: I }) => JSX.Element ;\n    list: I[];\n}\n\ninterface Components {\n    ListBox: typeof ListBox;\n}\n\n// Local Components\nconst ListBox = styled.div.attrs({\n    className: 'flex flex-column ma1'\n})``;\n\n// Defaults\n\nconst List =  <I extends object>({ \n    listItem: Component, \n    list = [], \n    ...props \n}:Props<I>) =>\n    <ListBox>\n    {\n        list.map((item, i: number) => <Component item={item} key={i}/>)\n    }\n    </ListBox>\n\nexport default List;","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from './';\nimport { Plant } from '../lib/plant';\n\n// Interfaces\ninterface Props extends React.PropsWithChildren<unknown> {\n    item: Plant;\n}\n\n// Local Components\nconst ListItemBox = styled.div.attrs({\n    className: 'pv1'\n})``;\n\n// Defaults\n\nconst PlantListItem = <I extends Plant>({\n    item\n}: Props) => \n    <ListItemBox>\n        <Link to={`/plants/${item.id}`}>{item.name}</Link>\n    </ListItemBox>\n;\n\nexport default PlantListItem;","import { pipe, flow, constant } from 'fp-ts/function';\nimport * as T from 'fp-ts/Task';\nimport * as A from 'fp-ts/Array';\nimport * as O from 'fp-ts/Option';\nimport * as IO from 'fp-ts/IO';\nimport * as E from 'fp-ts/Either';\nimport * as P from 'fp-ts/Predicate';\nimport * as R from 'fp-ts/Record';\nimport { stringify, parse, Json } from 'fp-ts/Json';\nimport { getItem, setItem, removeItem } from 'fp-ts-local-storage';\nimport { v4 as uuid } from 'uuid';\n\nexport interface Plant {\n    readonly id: Uuid;\n    readonly name: Name;\n    readonly tags: Tag[];\n};\n\ntype Uuid = string;\ntype Name = string;\ntype Tag = string;\n\nconst plantStorage:Readonly<string> = 'PLANTS';\n\ninterface empty {\n    (): Plant[]\n}\n\nconst empty:empty = constant([]);\n\ninterface hasId {\n    (id: Uuid): (plant: Plant) => boolean\n}\n\nconst hasId:hasId = (id) => (plant) => pipe(\n                    // is there a way to define this better ↓\n    R.lookup('id')(plant as unknown as Record<string, Uuid | Name | Tag[]>),\n    O.fold(\n        constant(false),\n        val => val === id\n    )\n);\n\ninterface fromJson {\n    (json: Json): Plant[]\n}\n\nconst fromJson:fromJson = (json) => json as unknown as Plant[];\n\ninterface of {\n    (plant: Omit<Plant, 'id'>): Plant\n}\n\nexport const of:of = ( plant) => Object.assign({\n    id: uuid(),\n    ...plant\n});\n\ninterface findById {\n    (id: Uuid): (plants: Plant[]) => O.Option<Plant>\n}\n\nexport const findById:findById = ( id ) => ( plants ) => \n    A.findFirst(hasId(id))(plants);\n\ninterface replacePlant {\n    (plant: Plant): (plant: Plant[]) => Plant[]\n}\n\nconst replacePlant:replacePlant = ( plant: Plant ) => \n    A.map( (p:Plant) => findById(plant.id) ? plant : p);\n\ninterface getPlants {\n    (): E.Either<unknown, Plant[]>\n}\n\nexport const getPlants:getPlants = pipe(\n    getItem(plantStorage),\n    IO.map(\n        O.foldW(\n            constant(E.of<unknown, Plant[]>(empty())),\n            flow(\n                parse,\n                E.chain((json) => E.right(fromJson(json)))\n            )\n        )\n    )\n);\n\ninterface storePlants {\n    (value: string): IO.IO<void>\n}\n\nconst storePlants:storePlants = (value) => setItem(plantStorage, value);\n\ninterface storeString {\n    (val: Plant[]): E.Either<unknown, IO.IO<void>>\n}\n\nconst storeString: storeString = flow(\n    stringify,\n    E.chain( val => E.of(storePlants(val)))\n);\n\ninterface addPlant {\n    (plant: Omit<Plant, 'id'>): IO.IO<E.Either<unknown, true>>\n}\n\nexport const addPlant:addPlant = (plant) => pipe(\n    getPlants,\n    IO.map(\n        E.chain(\n            flow(\n                A.append(of(plant)),\n                storeString,\n                E.chain(_ => E.right(true))\n            )\n        )\n    )\n);\n\ninterface updatePlant {\n    (plant: Plant): IO.IO<E.Either<unknown, true>>\n}\n\nexport const updatePlant:updatePlant = (plant) => pipe(\n    getPlants,\n    IO.map(\n        E.chain(\n            flow(\n                replacePlant(plant),\n                storeString,\n                E.chain(_ => E.right(true))\n            )\n        )\n    )\n);\n\ninterface removePlant {\n    (id: Uuid): IO.IO<E.Either<unknown, IO.IO<void>>>\n}\n\nexport const removePlant:removePlant = (id) => pipe(\n    getPlants,\n    IO.map(\n        E.chain(\n            flow(\n                A.filter(P.not(hasId(id))),\n                storeString\n            )\n        )\n    )\n);\n","import React from 'react';\nimport * as Recompose from 'recompose';\nimport * as A from 'fp-ts/Array';\nimport * as S from 'fp-ts/string';\nimport * as IO from 'fp-ts/IO';\nimport * as P from 'fp-ts/Predicate';\nimport * as E from 'fp-ts/Either';\nimport styled from 'styled-components';\nimport Header from '../../components/header';\nimport Footer from '../../components/footer';\nimport { Body } from '../../components/layout';\nimport { Background } from '../../components';\nimport SearchBar from '../../components/search';\nimport List from '../../components/list';\nimport ListItem from '../../components/plantlistitem';\nimport { getPlants, Plant } from '../../lib/plant';\nimport { flow, pipe } from 'fp-ts/lib/function';\nimport { trace } from '../../lib/debug';\n\n// Interfaces\ninterface Props extends React.PropsWithChildren<unknown> {\n    C: Components;\n    filterCurrentList: filterCurrentList;\n    searchText: string;\n    setSearchText: setSearchText;\n    items: Plant[];\n    setItems: setItems;\n    error?: string;\n    setError: setError;\n}\n\ntype PostInjectProps = Omit<\n    Props\n    , 'C' \n    | 'filterCurrentList' \n    | 'searchText' \n    | 'setSearchText' \n    | 'items' \n    | 'setItems' \n    | 'error' \n    | 'setError'>;\n\ninterface Components {\n    Background: typeof Background;\n    Body: typeof Body;\n    Header: typeof Header;\n    Footer: typeof Footer;\n    SearchBar: typeof SearchBar;\n    List: typeof List;\n    ListItem: typeof ListItem;\n}\ninterface filterCurrentList {\n    (list: Plant[], searchText: string ):Plant[];\n}\n\ninterface handleKeyPress {\n    (props: Props):React.KeyboardEventHandler<HTMLInputElement>;\n}\n\ninterface setSearchText {\n    (str: string): void;\n}\n\ninterface setItems {\n    (plants: Plant[]): void;\n}\n\ninterface setError {\n    (error: string): void;\n}\n// LOCAL COMPONENTS\n\n// Defaults\nconst filterCurrentList: filterCurrentList = ( list, searchTerm ) =>\n    A.filter<Plant>( item  => \n        P.or<string>( \n            searchTerm => S.includes(S.toLowerCase(searchTerm))(S.toLowerCase(item.name)) \n        ) ( \n            searchTerm =>  A.some<string>(tag => S.includes(S.toLowerCase(searchTerm))(S.toLowerCase(tag)))(item.tags) \n        )(searchTerm)\n    )(list);\n\nconst components: Components = {\n    Background,\n    Body,\n    Header,\n    Footer,\n    SearchBar,\n    List,\n    ListItem,\n};\n\n// Component\n  \nfunction Dashboard(props:Props) {\n\n    const currentList = S.isEmpty(props.searchText) ? props.items : props.filterCurrentList(props.items, props.searchText);\n\n    return (\n        <props.C.Background>\n                <props.C.Header/>\n                <props.C.Body>\n                    <div>\n                        <props.C.SearchBar onChange={(e) => props.setSearchText(e.target.value)}/>\n                    </div>\n                    <props.C.List<Plant> listItem={props.C.ListItem} list={currentList}/>\n                </props.C.Body>\n                <props.C.Footer/>\n        </props.C.Background>\n    )\n};\n\nconst enhance = Recompose.compose<Props, PostInjectProps>(\n    Recompose.withState('searchText', 'setSearchText', ''),\n    Recompose.withState( 'items', 'setItems', []),\n    Recompose.withState( 'error', 'setError', undefined),\n    Recompose.withProps({\n        filterCurrentList,\n        C: components\n    }),\n    Recompose.lifecycle<Props, unknown>({\n        componentDidMount(){\n            pipe(\n                getPlants,\n                IO.map(\n                    E.fold(\n                        flow(\n                            e => trace(e as Error),\n                            _ => this.props.setError('There was an issue fetching plants')\n                        ),\n                        this.props.setItems\n                    )\n                )\n            )();\n        }\n    })\n);\n\nexport default enhance(Dashboard);","import { Plant } from '../lib/plant'\nimport * as F from 'fp-ts/function';\nimport * as S from 'fp-ts/string';\nimport { Lens } from 'monocle-ts'\nimport { match, Matchable } from '../lib/matching';\n\n\nexport interface State {\n    loading: boolean;\n    info?: Plant;\n    error?: string;\n}\n\ninterface Reducers extends Matchable {\n    'LOADING': Reducer<LoadingPayload>;\n    'FETCHED': Reducer<InfoPayload>;\n    'ERROR': Reducer<ErrorPayload>;\n}\n\ntype Keys = 'LOADING' | 'FETCHED' | 'ERROR'\n\ninterface Type {\n    type: Keys\n}\n\ninterface LoadingPayload {\n\n}\n\ninterface InfoPayload {\n    info: Plant;\n}\n\ninterface ErrorPayload {\n    error: string;\n}\n\ntype Payloads = \n    LoadingPayload |\n    InfoPayload |\n    ErrorPayload;\n\ninterface LoadingAction extends Type {\n    payload: LoadingPayload\n}\n\ninterface InfoAction extends Type {\n    payload: InfoPayload;\n};\n\ninterface ErrorAction extends Type {\n    payload: ErrorPayload\n}\n\nexport type Action = \n    LoadingAction | \n    InfoAction |\n    ErrorAction;\n    \n\ninterface infoReducer {\n    (reducers:Reducers): ( state: State, action: Action) => State;\n}\n\ninterface Reducer <P>{\n    (val: P): (state:State) => State;\n}\n\nexport const LOADING:Keys = 'LOADING';\nexport const FETCHED:Keys = 'FETCHED';\nexport const ERROR:Keys = 'ERROR';\n\nconst loading = Lens.fromProp<State>()('loading');\nconst fetched = Lens.fromProp<State>()('info');\nconst error = Lens.fromProp<State>()('error');\n\nexport const defaultState: State = {\n    loading: false,\n    info: undefined,\n    error: undefined\n}\n\nconst reducers:Reducers = {\n    [LOADING]: _ => F.flow(\n        loading.modify(F.constTrue)\n    ),\n    [FETCHED]: payload => F.flow(\n        loading.modify(F.constFalse),\n        fetched.modify(F.constant(payload.info)),\n        error.modify(F.constant(S.empty))\n    ),\n    [ERROR]: payload => F.flow(\n        loading.modify(F.constFalse),\n        error.modify(F.constant(payload.error)),\n    )\n}\n\nconst reducer:infoReducer = (reducers) => ( state, action ) =>  \n    match<Reducers, Reducer<Payloads>>(\n        reducers, \n        F.constant(F.constant(state))\n    )(action.type)(action.payload)(state);\n\nexport const infoReducer = reducer(reducers);\n\n\n    ","import * as A from 'fp-ts/Array';\nimport * as F from 'fp-ts/function';\nimport * as R from 'fp-ts/Record';\nimport * as O from 'fp-ts/Option';\n\ninterface match {\n    <P extends Matchable, B extends any>(patterns: P, d: B): (value: Key) => B;\n}\n\nexport interface Matchable {\n    [key: string]: any;\n}\n\ntype Key = string\n\nexport const match:match = ( patterns, d ) => F.flow(\n    (val) => R.lookup(val)(patterns),\n    O.getOrElse(F.constant(d))\n);\n    \n","import React from 'react';\nimport * as Recompose from 'recompose';\nimport { InfoParams } from '../../App';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport styled from 'styled-components';\nimport * as A from 'fp-ts/Array';\nimport * as F from 'fp-ts/function';\nimport * as O from 'fp-ts/Option';\nimport * as IO from 'fp-ts/IO';\nimport * as E from 'fp-ts/Either';\nimport { Body } from '../../components/layout';\nimport { Background } from '../../components';\nimport Header from '../../components/header';\nimport Footer from '../../components/footer';\nimport { findById } from '../../lib/plant';\nimport PlantInfo from '../../components/info';\nimport { getPlants } from '../../lib/plant';\nimport { \n    infoReducer, \n    defaultState, \n    LOADING,\n    ERROR, \n    FETCHED, \n    State, \n    Action } from '../../state/info';\nimport { trace } from '../../lib/debug';\n\n// CONSTANTS\n// INTERFACES\ninterface Props extends React.PropsWithChildren<unknown>, \n                        Recompose.reducerProps<State, Action, 'state', 'dispatch'>, \n                        RouteComponentProps<InfoParams> {\n};\n\ntype PostInjectProps = Omit<\n    Props\n    , 'state'\n    | 'dispatch'>;\n// ALIASES\n\n// LOCAL COMPONENTS\n\n// DEFAULT PROPS\n\n// COMPONENT\nconst Info = (props: Props) => (\n    <Background>\n        <Header/>\n        <Body>\n            <p style={{color: 'white'}}>\n                {props.state.info?.name}\n            </p>\n       </Body>\n       <Footer/>\n    </Background>\n);\n\nconst program = Recompose.compose<Props, PostInjectProps>(\n    Recompose.withReducer('state', 'dispatch', infoReducer, defaultState),\n    Recompose.lifecycle<Props, unknown>({\n        componentDidMount(){\n            this.props.dispatch({type: LOADING, payload: {}});\n            F.pipe(\n                getPlants,\n                IO.map(\n                    E.fold(\n                        F.flow(\n                            e => trace(e as Error),\n                            _ => this.props.dispatch({ type: ERROR, payload: {error: 'There was an issue fetching plants'}})\n                        ),\n                        F.flow(\n                            findById(this.props.match.params.id),\n                            O.fold(\n                                () => this.props.dispatch({ type: ERROR, payload: { error: 'Couldn\\'t find a plant with that id' }}),\n                                plant => this.props.dispatch({ type: FETCHED, payload: { info: plant } } )\n                            )\n                        )\n                    )\n                )\n            )();\n        }\n    })\n);\n\nexport default withRouter(program(Info));","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Splash from './pages/common/splash';\nimport Dashboard from './pages/common/dashboard';\nimport Info from './pages/plant/info';\nimport { v4 } from 'uuid'\n\ninterface IdParam {\n  id: string\n};\n\nexport interface InfoParams extends IdParam {\n};\n\nexport interface EditParams extends IdParam {\n\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/'>\n          <Splash/>\n        </Route>\n        <Route exact path='/plants'>\n          <Dashboard/>\n        </Route>\n        <Route path='/plants/add'>\n          <div>Hello</div>\n        </Route>\n        <Route path='/plants/edit/:id'>\n          <div>Hello</div>\n        </Route>\n        <Route path='/plants/:id'>\n          <Info/>\n        </Route>\n        <Route path='/journal'>\n          <div>Hello</div>\n        </Route>\n        <Route path='/journal/add'>\n          <div>Hello</div>\n        </Route>\n        <Route path='/journal/edit/:id'>\n          <div>Hello</div>\n        </Route>\n        <Route path='/journal/:id'>\n          <div>Hello</div>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport Splash from './pages/common/splash';\nimport theme from './theme';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App/>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
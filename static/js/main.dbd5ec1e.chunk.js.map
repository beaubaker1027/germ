{"version":3,"sources":["theme.ts","components/form.ts","assets/logo.svg","components/images.ts","components/link.ts","components/hash.ts","components/text.ts","components/layout.ts","pages/common/splash.tsx","components/header.tsx","components/footer.tsx","assets/filter.svg","components/search.tsx","lib/record.ts","components/list.tsx","components/plantlistitem.tsx","lib/db.ts","lib/storage.ts","lib/plant.ts","api/local/plant.ts","lib/debug.ts","pages/common/dashboard.tsx","state/info.ts","lib/journal.ts","api/local/journal.ts","lib/matching.ts","pages/plant/info.tsx","pages/plant/create.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","width","colors","primary","secondary","background","error","Label","styled","label","attrs","className","props","Input","input","TextArea","as","ErrorMessage","span","Submit","type","Icon","i","icon","LargeLogo","img","src","Logo","SmallLogo","Link","L","ActionLink","Hash","H1","h1","extendBooleanProp","value","prop","B","F","A","S","concat","O","concatClass","val","Box","div","centerVertical","centerHorizontal","padded","Column","Row","Background","Body","MaxWidth","fadeIn","keyframes","Title","CenteredBackground","Splash","entryLink","to","Container","header","program","Recompose","title","footer","a","href","SearchBox","SearchInput","key","placeholder","FilterIcon","ListBox","List","Component","listItem","list","map","item","ListItemBox","PlantListItem","id","name","tag","tags","hasId","obj","R","mkGet","onNone","onSome","getItems","IO","storeString","store","stringify","E","setItems","mkModify","modify","get","set","statuses","empty","findById","plants","mkGetPlants","parse","mkAddPlant","plant","Object","assign","uuid","of","mkUpdatePlant","p","mkRemovePlant","P","plantStorage","storePlant","setItem","getPlants","getItem","addPlant","debug","process","isDev","equals","trace","msg","C","SpacedRow","reducers","enhance","undefined","filterCurrentList","searchTerm","componentDidMount","pipe","flow","e","_","setError","this","currentList","searchText","items","onChange","setSearchText","target","ListItem","journals","mkGetJournals","mkAddJournal","journal","mkUpdateJournal","mkRemoveJournal","journalStorage","storeJournal","getJournals","LOADING","FETCHED","ERROR","loading","Lens","fromProp","fetched","defaultState","info","payload","infoReducer","state","action","patterns","d","match","dispatch","AP","I","findPlantById","params","findJournalById","fjournals","withRouter","schema","Yup","shape","required","max","description","status","careRequirement","sunRequirement","soilRequirement","withForm","withFormik","mapPropsToValues","validationSchema","handleSubmit","v","console","log","split","onSubmit","for","handleChange","onBlur","handleBlur","errors","touched","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbd5ec1e.chunk.js","sourcesContent":["export interface Theme {\n    readonly width: number;\n    readonly colors: {\n        readonly primary: string;\n        readonly secondary: string;\n        readonly background: string;\n        readonly error: string;\n    };\n}\n\nconst theme:Theme = {\n    width: 800,\n    colors: {\n        primary: '#00FFFF',\n        secondary: '#F2F2F2',\n        background: '#000000',\n        error: '#ff6363'\n    }\n}\n\nexport default theme;","import styled from 'styled-components';\n\nexport const Label = styled.label.attrs({\n    className: 'pa2'\n})<{for:string}>`\n    font-size: 16px;\n    color: ${props => props.theme.colors.secondary}\n`;\n\nexport const Input = styled.input.attrs({\n    className: 'pa2 outline-0 b0 w-100 br1'\n})`\n    width: 200px;\n    background-color: ${props => props.theme.colors.background};\n    color: ${props => props.theme.colors.secondary};\n    border: 1px solid ${props => props.theme.colors.secondary};\n    @media (max-width: ${props => props.theme.width}px){\n        min-width: 100%;\n    }\n`;\n\nexport const TextArea = styled(Input).attrs({\n    as: 'textarea'\n})`\n    min-height: 100px;\n`;\n\nexport const ErrorMessage = styled.span.attrs({\n    className: 'pv2'\n})`\n    color: ${props => props.theme.colors.error};\n    &:before{\n        content: '*';\n    }\n`;\n\nexport const Submit = styled.input.attrs({\n    className: 'pa2',\n    type: 'submit'\n})`\n    border: 1px solid ${props => props.theme.colors.secondary};\n`;","export default __webpack_public_path__ + \"static/media/logo.b9c9a0c2.svg\";","import styled from 'styled-components';\nimport Logo from '../assets/logo.svg';\n\ninterface Icon {\n    icon: string;\n}\n\nexport const Icon = styled.i.attrs({\n    className: 'pa2'\n})<Icon>`\n\nbackground: url(${props => props.icon});\nbackground-size: contain;\nbackground-position: center;\nbackground-repeat: no-repeat;\n`;\n\nexport const LargeLogo = styled.img.attrs({\n    src: Logo\n})`height: 200px;`;\n\nexport const SmallLogo = styled(LargeLogo)`height: 16px;`;","import styled from 'styled-components';\nimport { Link as L } from 'react-router-dom';\n\nexport const Link = styled(L)`\n    color: ${props => props.theme.colors.secondary};\n    text-decoration: none;\n\n    &:hover {\n        opacity: 0.75;\n    }\n\n    &:active {\n        opacity: .5;\n    }\n`;\n\nexport const ActionLink = styled(Link).attrs({\n    className: 'flex justify-center items-center pa1 ph2 br4'\n})`\n    border: 2px solid ${props => props.theme.colors.secondary};\n    color: ${props => props.theme.colors.secondary};\n    font-weight: bold;\n`;","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Hash = styled(Link).attrs({\n    className: 'dib pv1 bw1 ma1'\n})`\n    background-color: transparent;\n    color: ${props => props.theme.colors.secondary };\n    font-size: 12px;\n    outline: none;\n    opacity: 0.75;\n\n    &:hover {\n        opacity: 0.6;\n    }\n    &:active {\n        opacity: 0.4;\n    }\n`;","import styled from 'styled-components';\n\nexport const H1 = styled.h1`\n    color: ${ props => props.theme.colors.secondary};\n    font-size: 20px;\n    padding: 0px;\n    margin: 0px;\n`;\n\nexport const Sub = styled(H1).attrs({\n    as: 'h2'\n})`\n    font-size: 18px;\n`;\n\nexport const Text = styled.span`\n    color: ${ props => props.theme.colors.secondary};\n    font-size: 16px;\n    padding: 0px;\n    margin: 0px;\n`\n","import styled from 'styled-components';\nimport * as S from 'fp-ts/string';\nimport * as B from 'fp-ts/boolean';\nimport * as F from 'fp-ts/function';\nimport * as SG from 'fp-ts/Semigroup';\nimport * as A from 'fp-ts/Array';\nimport * as O from 'fp-ts/Option';\n\ninterface LayoutProps {\n    flex?: boolean\n    centerVertical?: boolean;\n    centerHorizontal?: boolean;\n    padded?: boolean;\n}\n\ninterface SpacingProps {\n    padded?: boolean;\n}\n\ninterface extendProp <P> {\n    (value: string): (prop?: P) => (className: string) => string;\n}\n\n// const extendNumberProp: extendProp<number> = value => prop => className =>\n\n\nconst extendBooleanProp:extendProp<boolean> = value => prop => className => \n    B.fold(\n        F.constant(className),\n        F.constant(A.reduce(className, S.Semigroup.concat)([' ', value]))\n    )(F.pipe(\n        O.fromNullable(prop),\n        O.getOrElse(\n            F.constFalse\n        )\n    ));\n\ninterface concatClass {\n    (value?: string): (className: string) => string;\n}\nconst concatClass:concatClass = value => className => F.pipe(\n    O.fromNullable(value),\n    O.getOrElse(\n        F.constant(S.empty)\n    ),\n    (val) => S.Semigroup.concat(className, val)\n)\n\nconst Box = styled.div.attrs<LayoutProps & SpacingProps>(F.flow(\n    props => ({\n        className: F.pipe(\n            extendBooleanProp('justify-center')(props.centerVertical)(''),\n            extendBooleanProp('items-center')(props.centerHorizontal),\n            extendBooleanProp('ph3')(props.padded)\n        )\n    })\n))<LayoutProps & SpacingProps>``;\n\nexport const Column = styled(Box).attrs<LayoutProps & SpacingProps>(props => ({\n    className: concatClass(props.className)('flex flex-column')\n}))<LayoutProps & SpacingProps>``;\n\nexport const Row = styled(Box).attrs<LayoutProps & SpacingProps>(props => ({\n    className: concatClass(props.className)('flex flex-row')\n}))<LayoutProps & SpacingProps>``;\n\nexport const Background = styled(Box).attrs<LayoutProps & SpacingProps>(props => ({\n    className: concatClass(props.className)('flex flex-column w-100 h-100')\n}))<LayoutProps & SpacingProps>`\n    background-color: ${props => props.theme.colors.background};\n`;\n\nexport const Body = styled(Box).attrs<LayoutProps & SpacingProps>(props => ({\n    className: concatClass(props.className)('flex flex-column flex-auto pv2')\n}))`\n    overflow: auto;\n`;\n\nexport const MaxWidth = styled(Background)`\n    max-width: ${props => props.theme.width}px;\n    background-color: transparent;\n`;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { LargeLogo, Link, Background, H1 } from '../../components';\n\nconst fadeIn = keyframes`\n    0% { opacity: 0 };\n    100% { opacity: 1 };\n`;\n\nconst Logo = styled(LargeLogo)`\n    margin-bottom: 20px;\n`;\n\nconst Title = styled(H1)`\n    margin-bottom: 45px;\n    animation-name: ${fadeIn};\n    animation-duration: 2s;\n`\n\nconst CenteredBackground = styled(Background).attrs<{className: string}>(props => ({\n    className: `items-center justify-center ${props.className}`\n}))``;\n\nconst entryText = 'Get Started';\nconst defaultEntryLink = '/plants';\n\ninterface Props {\n    entryLink?: string;\n}\n\nfunction Splash({ \n    entryLink = defaultEntryLink\n}:Props){\n    return (\n        <CenteredBackground>\n            <Logo/>\n            <Title>Germ</Title>\n            <Link to={entryLink}>{entryText}</Link>\n        </CenteredBackground>\n    )\n}\n\nexport default Splash;","import React from 'react';\nimport * as Recompose from 'recompose';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { SmallLogo } from './';\n\n// CONSTANTS\n\n// INTERFACES\ninterface Props extends React.PropsWithChildren<unknown>{\n    title?: string;\n}\n\n// LOCAL COMPONENTS\nconst Container = styled.header.attrs({\n    className: 'flex ph1 pv2 items-center'\n})``;\n\nconst Title = styled.span.attrs({\n    className: 'pl1'\n})`\n    font-family: Helvetica;\n    color: #f2f2f2;\n`;\n\n// DEFAULT PROPS\nconst title = 'Germ';\n\n// COMPONENT\nfunction header(props: Props) {\n    return (\n        <Container>\n            <Link to={'/plants'}>\n                <SmallLogo/>\n            </Link>\n            <Title>\n                {props.title}\n            </Title>\n        </Container>\n    );\n};\n\nconst program = Recompose.compose<Props, Props>(\n    Recompose.defaultProps({\n        title\n    })\n)\n\nexport default program(header);","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.footer.attrs({\n    className: 'flex ph1 pv2 items-center justify-end'\n})``;\n\nconst Link = styled.a.attrs({\n    href: 'https://github.com/beaubaker1027/germ',\n    className: 'pl1 no-underline'\n})`\n    color: ${props => props.theme.colors.secondary};\n`;\n\nfunction footer() {\n    return (\n        <Container>\n            <Link>Github</Link>\n        </Container>\n    );\n};\n\nexport default footer;","export default __webpack_public_path__ + \"static/media/filter.5792311d.svg\";","import React from 'react';\nimport * as Recompose from 'recompose';\nimport styled from 'styled-components';\nimport { Input, Icon } from '.';\nimport FilterIcon from '../assets/filter.svg';\n\n// Interfaces\ninterface Props extends React.PropsWithChildren<unknown>, \n                        Omit<\n                            React.InputHTMLAttributes<HTMLInputElement>, \n                            'className' | 'ref' | 'children' | 'as'\n                        >{\n}\n// Local Components\nconst SearchBox = styled.div.attrs({\n    className: 'dib'\n})`\n    border-style: solid;\n    border-color: ${props => props.theme.colors.primary};\n    border-width: 0px 0px 1px 0px;\n`;\n\nconst SearchInput = styled(Input)`\n    color: ${props => props.theme.colors.primary};\n    border-width: 0px;\n`;\n\n// Defaults\n\nconst defaultPlaceholder = 'Search by Name or Tag';\n\n// Component\nfunction SearchBar(props:Props ) {\n    return (\n        <SearchBox>\n            <SearchInput {...props}/>\n            <Icon icon={FilterIcon}/>\n        </SearchBox>\n    )\n};\n\n\nconst program = Recompose.compose<Props, Props>(\n    Recompose.defaultProps({\n        placeholder: defaultPlaceholder\n    })\n);\n\nexport default program(SearchBar);","import * as O from 'fp-ts/Option';\nimport * as R from 'fp-ts/Record';\nimport * as F from 'fp-ts/function';\n\nexport type Keys<O> = keyof O;\nexport type Values<O> = O[keyof O]; \n\ninterface mkHasValueInKey {\n    (key:string): <V>(val: V) => <O extends Record<Keys<O>, Values<O>>>(obj: O) => boolean\n}\nexport const mkHasValueInKey:mkHasValueInKey = (key) => (id) => (obj) => F.pipe(\n    R.lookup(key)(obj),\n    O.fold(\n        F.constant(false),\n        val => val === id\n    )\n);","import React from 'react';\nimport styled from 'styled-components';\n\n// Interfaces\ninterface Props<I> extends React.PropsWithChildren<unknown> {\n    listItem: ({ item }: { item: I }) => JSX.Element ;\n    list: I[];\n}\n\n// Local Components\nconst ListBox = styled.div.attrs({\n    className: 'flex flex-column ma1'\n})``;\n\n// Defaults\n\nconst List =  <I extends object>({ \n    listItem: Component, \n    list = [], \n    ...props \n}:Props<I>) =>\n    <ListBox>\n    {\n        list.map((item, i: number) => <Component item={item} key={i}/>)\n    }\n    </ListBox>\n\nexport default List;","import React from 'react';\nimport styled from 'styled-components';\nimport * as A from 'fp-ts/Array';\nimport { Link, Column, Row, Hash } from './';\nimport { DBPlant } from '../lib/plant';\n\n// Interfaces\ninterface Props extends React.PropsWithChildren<unknown> {\n    item: DBPlant;\n}\n\n// Local Components\nconst ListItemBox = styled.div.attrs({\n    className: 'pv1'\n})``;\n\n// Defaults\n\nconst PlantListItem = ({\n    item\n}: Props) => \n    <ListItemBox>\n        <Column>\n        <Link to={`/plants/${item.id}`}>{item.name}</Link>\n        <Row>\n            {\n                A.map<string, JSX.Element>(\n                    (tag) => <Hash to={`/tags/${tag}`}>#{tag}</Hash>\n                )(item.tags)\n            }\n        </Row>\n        </Column>\n    </ListItemBox>\n;\n\nexport default PlantListItem;","import { mkHasValueInKey } from './record';\n\nexport interface DBEntity {\n    readonly id: Uuid;\n}\n\nexport type Uuid = string;\n\nexport const hasId = mkHasValueInKey('id');","import * as F from 'fp-ts/function';\nimport * as O from 'fp-ts/Option';\nimport * as IO from 'fp-ts/IO';\nimport * as E from 'fp-ts/Either';\nimport { stringify } from 'fp-ts/Json';\n\ntype getItems = IO.IO<O.Option<string>>;\ntype setItems = IO.IO<void>;\n\ninterface mkGet {\n    <L>(onNone:() => L): \n        <R>(onSome: (val:string) => R) => \n            (getItems:getItems) =>\n                IO.IO<L | R>;\n}\nexport const mkGet:mkGet = onNone => onSome => getItems => F.pipe(\n    getItems,\n    IO.map(\n        O.foldW(\n            onNone,\n            onSome,\n        )\n    )\n);\n\ninterface storeString {\n    (store: (val:string) => setItems): <V>(obj:V) => E.Either<unknown, true>\n}\nexport const storeString:storeString = store => F.flow(\n    stringify,\n    E.map(store),\n    E.map<setItems, true>(\n        setItems => {\n            setItems();\n            return true;\n        }\n    )\n\n);\n\ninterface mkModify {\n    <V, G>(modify: (i:V) => (a:G) => G ):\n        <E>(get:IO.IO<E.Either<E, G>>) =>\n            <E1>(set:(a: G) => E.Either<E | E1, true>) => \n                (val: V) => \n                    IO.IO<E.Either<unknown, true>>\n}\nexport const mkModify:mkModify = modify => get => set => (item) => F.pipe(\n    get,\n    IO.map(\n        E.chainW(\n            F.flow(\n                modify(item),\n                set\n            )\n        )\n    )\n);","import * as F from 'fp-ts/function';\nimport * as A from 'fp-ts/Array';\nimport * as O from 'fp-ts/Option';\nimport * as E from 'fp-ts/Either';\nimport * as P from 'fp-ts/Predicate';\nimport { stringify, parse } from 'fp-ts/Json';\nimport { v4 as uuid } from 'uuid';\nimport { DBEntity, hasId, Uuid } from './db';\nimport { mkGet, mkModify } from './storage';\n\nexport interface Plant {\n    readonly name: Name;\n    readonly description: Description;\n    readonly careRequirement: CareRequirement;\n    readonly sunRequirement: SunRequirement;\n    readonly soilRequirement: SoilRequirement;\n    readonly status: Status;\n    readonly tags: Tag[];\n}\n\nexport type DBPlant = Plant & DBEntity;\n\nexport type Plants = DBPlant[];\n\nexport type Name = string;\nexport type Description = string;\nexport type CareRequirement = string;\nexport type SunRequirement = string;\nexport type SoilRequirement = string;\nexport type Status = \n      'Seed'\n    | 'Sprout'\n    | 'Seedling'\n    | 'Vegetative'\n    | 'Budding'\n    | 'Flowering'\n    | 'Ripening'\n    | 'Dead/Dormant/Harvested';\nexport type Tag = string;\n\nexport const statuses:Status[] = \n    ['Seed'\n    , 'Sprout'\n    , 'Seedling'\n    , 'Vegetative'\n    , 'Budding'\n    , 'Flowering'\n    , 'Ripening'\n    , 'Dead/Dormant/Harvested' ];\n\ninterface empty {\n    (): Plants\n}\nexport const empty:empty = A.zero;\n\ninterface fromJson {\n    (val:string): E.Either<Error, Plants>\n}\nexport const fromJson:fromJson = (val) => parse(val) as E.Either<Error, Plants>;\n\ninterface toJson {\n    (plants: Plants): E.Either<unknown, string>;\n}\nexport const toJson:toJson = (plants) => stringify(plants);\n\ninterface of {\n    (plant: Plant): DBPlant\n}\nexport const of:of = ( plant) => Object.assign({\n    id: uuid(),\n    ...plant\n});\n\ninterface findById {\n    (id: Uuid): (plants: Plants) => O.Option<DBPlant>\n}\nexport const findById:findById = ( id ) => ( plants ) => \n    A.findFirst(hasId(id))(plants);\n\ninterface appendNewPlant {\n    (plant: Plant): (plants:Plants) => Plants;\n}\nexport const appendNewPlant:appendNewPlant = plant => plants => A.append(of(plant))(plants);\n\ninterface replacePlant {\n    (plant: DBPlant): (plant: Plants) => Plants\n}\nexport const replacePlant:replacePlant = plant => \n    A.map( (p) => findById(plant.id) ? plant : p);\n\ninterface deletePlant {\n    (id:Uuid): (plants:Plants) => Plants;\n}\nexport const deletePlant:deletePlant = id => plants => A.filter(P.not(hasId(id)))(plants);\n\nconst emptyPlantsE = () => (F.pipe(empty, E.of) as unknown as E.Right<Plants>);\n\nexport const mkGetPlants = mkGet(emptyPlantsE)(fromJson);\nexport const mkAddPlant = mkModify(appendNewPlant);\nexport const mkUpdatePlant = mkModify(replacePlant);\nexport const mkRemovePlant = mkModify(deletePlant);","import * as F from 'fp-ts/function';\nimport * as E from 'fp-ts/Either';\nimport {\n    mkGetPlants,\n    mkAddPlant,\n    mkUpdatePlant,\n    mkRemovePlant\n} from '../../lib/plant';\nimport {\n    storeString\n} from '../../lib/storage';\nimport { getItem, setItem } from 'fp-ts-local-storage';\n\nconst plantStorage:Readonly<string> = 'PLANTS';\n\nconst storePlant = storeString((val) => setItem(plantStorage, val))\n\nexport const getPlants = \n    mkGetPlants(getItem(plantStorage));\n\nexport const addPlant = \n    mkAddPlant(getPlants)\n              (storePlant);\n\nexport const updatePlant = \n    mkUpdatePlant(getPlants)\n                 (storePlant);\n\nexport const removePlant = \n    mkRemovePlant(getPlants)\n                 (storePlant);","import * as S from 'fp-ts/string';\nimport * as C from 'fp-ts/Console';\nimport * as O from 'fp-ts/Option';\nimport * as IO from 'fp-ts/IO';\nimport * as B from 'fp-ts/boolean';\nimport * as F from 'fp-ts/function';\n\ntype Debug = boolean;\ntype Msg = Error | String;\n\ninterface get {\n    (k: string): IO.IO<O.Option<string>>;\n}\nconst get:get = (key) => \n    F.pipe(\n        process.env[key],\n        O.fromNullable,\n        IO.of\n    )\n\nexport const debug = get('NODE_ENV');\n\ninterface isDev {\n    (): Debug;\n}\nconst isDev:isDev = F.pipe(\n    debug,\n    IO.map(\n        O.fold(\n            F.constFalse,\n            val => S.Eq.equals('development', val)\n        )\n    )\n);\n\ninterface trace {\n    (msg: Msg): void;\n}\n\n\nexport const trace:trace = F.flow(\n    (msg) => \n        B.fold(\n            F.constVoid, \n            C.error(msg)\n        )(isDev())\n);","import React from 'react';\nimport * as Recompose from 'recompose';\nimport * as A from 'fp-ts/Array';\nimport * as S from 'fp-ts/string';\nimport * as IO from 'fp-ts/IO';\nimport * as P from 'fp-ts/Predicate';\nimport * as E from 'fp-ts/Either';\nimport styled from 'styled-components';\nimport Header from '../../components/header';\nimport Footer from '../../components/footer';\nimport { Background, Body, Row, ActionLink, MaxWidth } from '../../components';\nimport SearchBar from '../../components/search';\nimport List from '../../components/list';\nimport ListItem from '../../components/plantlistitem';\nimport { DBPlant, Plants } from '../../lib/plant'\nimport { getPlants } from '../../api/local/plant';\nimport { flow, pipe } from 'fp-ts/lib/function';\nimport { trace } from '../../lib/debug';\nimport { getItem } from 'fp-ts-local-storage';\n\n// CONSTANTS\n\n// Interfaces\ninterface Props extends React.PropsWithChildren<unknown> {\n    filterCurrentList: filterCurrentList;\n    searchText: string;\n    setSearchText: setSearchText;\n    items: Plants;\n    setItems: setItems;\n    error?: string;\n    setError: setError;\n}\n\ntype ComposedProps = \n    'filterCurrentList' \n    | 'searchText' \n    | 'setSearchText' \n    | 'items' \n    | 'setItems' \n    | 'error' \n    | 'setError';\n\ntype PostInjectProps = Omit<Props, ComposedProps>;\n\ninterface filterCurrentList {\n    (list: Plants, searchText: string ):Plants;\n}\n\ninterface setSearchText {\n    (str: string): void;\n}\n\ninterface setItems {\n    (plants: Plants): void;\n}\n\ninterface setError {\n    (error: string): void;\n}\n// LOCAL COMPONENTS\nconst SpacedRow = styled(Row)`\n    justify-content: space-between;\n`;\n\n// Defaults\nconst filterCurrentList: filterCurrentList = ( list, searchTerm ) =>\n    A.filter<DBPlant>( item  => \n        P.or<string>( \n            searchTerm => S.includes(S.toLowerCase(searchTerm))(S.toLowerCase(item.name)) \n        ) ( \n            searchTerm =>  A.some<string>(tag => S.includes(S.toLowerCase(searchTerm))(S.toLowerCase(tag)))(item.tags) \n        )(searchTerm)\n    )(list);\n\n// Component\n  \nfunction Dashboard(props:Props) {\n\n    const currentList = S.isEmpty(props.searchText) ? props.items : props.filterCurrentList(props.items, props.searchText);\n\n    return (\n        <Background centerHorizontal>\n            <MaxWidth>\n                <Header title={'Dashboard'}/>\n                <Body>\n                    <SpacedRow padded centerVertical>\n                        <SearchBar onChange={(e) => props.setSearchText(e.target.value)}/>\n                        <ActionLink to={'/plants/add'}>Add</ActionLink>\n                    </SpacedRow>\n                    <List<DBPlant> listItem={ListItem} list={currentList}/>\n                </Body>\n                <Footer/>\n            </MaxWidth>\n        </Background>\n    )\n};\n\nconst enhance = Recompose.compose<Props, PostInjectProps>(\n    Recompose.withState('searchText', 'setSearchText', ''),\n    Recompose.withState( 'items', 'setItems', []),\n    Recompose.withState( 'error', 'setError', undefined),\n    Recompose.withProps({\n        filterCurrentList\n    }),\n    Recompose.lifecycle<Props, unknown>({\n        componentDidMount(){\n            pipe(\n                getPlants,\n                IO.map(\n                    E.fold(\n                        flow(\n                            e => trace(e as Error),\n                            _ => this.props.setError('There was an issue fetching plants')\n                        ),\n                        this.props.setItems\n                    )\n                )\n            )();\n        }\n    })\n);\n\nexport default enhance(Dashboard);","import { DBPlant } from '../lib/plant'\nimport * as F from 'fp-ts/function';\nimport * as S from 'fp-ts/string';\nimport { Lens } from 'monocle-ts'\nimport { match, Matchable } from '../lib/matching';\n\n\nexport interface State {\n    loading: boolean;\n    info?: DBPlant;\n    error?: string;\n}\n\ninterface Reducers extends Matchable {\n    'LOADING': Reducer<LoadingPayload>;\n    'FETCHED': Reducer<InfoPayload>;\n    'ERROR': Reducer<ErrorPayload>;\n}\n\ntype Keys = 'LOADING' | 'FETCHED' | 'ERROR'\n\ninterface Type {\n    type: Keys\n}\n\ninterface LoadingPayload {\n\n}\n\ninterface InfoPayload {\n    info: DBPlant;\n}\n\ninterface ErrorPayload {\n    error: string;\n}\n\ntype Payloads = \n    LoadingPayload |\n    InfoPayload |\n    ErrorPayload;\n\ninterface LoadingAction extends Type {\n    payload: LoadingPayload\n}\n\ninterface InfoAction extends Type {\n    payload: InfoPayload;\n};\n\ninterface ErrorAction extends Type {\n    payload: ErrorPayload\n}\n\nexport type Action = \n    LoadingAction | \n    InfoAction |\n    ErrorAction;\n\ninterface Reducer <P>{\n    (val: P): (state:State) => State;\n}\n\nexport const LOADING:Keys = 'LOADING';\nexport const FETCHED:Keys = 'FETCHED';\nexport const ERROR:Keys = 'ERROR';\n\nconst loading = Lens.fromProp<State>()('loading');\nconst fetched = Lens.fromProp<State>()('info');\nconst error = Lens.fromProp<State>()('error');\n\nexport const defaultState: State = {\n    loading: false,\n    info: undefined,\n    error: undefined\n}\n\nconst reducers:Reducers = {\n    [LOADING]: _ => F.flow(\n        loading.modify(F.constTrue)\n    ),\n    [FETCHED]: payload => F.flow(\n        loading.modify(F.constFalse),\n        fetched.modify(F.constant(payload.info)),\n        error.modify(F.constant(S.empty))\n    ),\n    [ERROR]: payload => F.flow(\n        loading.modify(F.constFalse),\n        error.modify(F.constant(payload.error)),\n    )\n}\n\ninterface reducer {\n    (reducers:Reducers): ( state: State, action: Action) => State;\n}\nconst reducer:reducer = (reducers) => ( state, action ) =>  \n    match<Reducers, Reducer<Payloads>>(\n        reducers, \n        F.constant(F.constant(state))\n    )(action.type)(action.payload)(state);\n\nexport const infoReducer = reducer(reducers);\n\n\n    ","import * as F from 'fp-ts/function';\nimport * as A from 'fp-ts/Array';\nimport * as O from 'fp-ts/Option';\nimport * as E from 'fp-ts/Either';\nimport * as P from 'fp-ts/Predicate';\nimport { stringify, parse } from 'fp-ts/Json';\nimport { v4 as uuid } from 'uuid';\nimport { DBEntity, hasId, Uuid } from \"./db\";\nimport { mkGet, mkModify } from './storage';\n\nexport interface Journal {\n    readonly date: DateTime;\n    readonly note: Note;\n}\n\nexport type DBJournal = Journal & DBEntity;\n\nexport type Journals = DBJournal[];\n\ntype DateTime = Number;\ntype Note = String;\n\ninterface empty {\n    (): Journals;\n}\nexport const empty:empty = A.zero;\n\ninterface fromJson {\n    (val:string): E.Either<Error, Journals>\n}\nexport const fromJson:fromJson = (val) => parse(val) as E.Either<Error, Journals>;\n\ninterface toJson {\n    (journals: Journals): E.Either<unknown, string>;\n}\nexport const toJson:toJson = (journals) => stringify(journals);\n\ninterface of {\n    (journal: Journal): DBJournal\n}\nexport const of:of = ( journal ) => Object.assign({\n    id: uuid(),\n    ...journal\n});\n\ninterface findById {\n    (id: Uuid): (journals: Journals) => O.Option<DBJournal>\n}\nexport const findById:findById = ( id ) => ( journals ) => \n    A.findFirst(hasId(id))(journals);\n\ninterface appendNewJournal {\n    (journal: Journal): (journals:Journals) => Journals;\n}\nexport const appendNewJournal:appendNewJournal = journal => journals => A.append(of(journal))(journals);\n\ninterface replaceJournal {\n    (journal: DBJournal): (journals: Journals) => Journals\n}\nexport const replaceJournal:replaceJournal = journal => \n    A.map( (p) => findById(journal.id) ? journal : p);\n\ninterface deleteJournal {\n    (id:Uuid): (journals:Journals) => Journals;\n}\nexport const deleteJournal:deleteJournal = id => journals => A.filter(P.not(hasId(id)))(journals);\n\nexport const journalStorage:Readonly<string> = 'Journals';\n\nconst emptyJournalsE = () => (F.pipe(empty, E.of) as unknown as E.Right<Journals>);\n\nexport const mkGetJournals = mkGet(emptyJournalsE)(fromJson);\nexport const mkAddJournal = mkModify(appendNewJournal);\nexport const mkUpdateJournal = mkModify(replaceJournal);\nexport const mkRemoveJournal = mkModify(deleteJournal);","import * as F from 'fp-ts/function';\nimport * as E from 'fp-ts/Either';\nimport {\n    mkGetJournals,\n    mkAddJournal,\n    mkUpdateJournal,\n    mkRemoveJournal\n} from '../../lib/journal';\nimport {\n    storeString\n} from '../../lib/storage';\nimport { getItem, setItem } from 'fp-ts-local-storage';\n\nconst journalStorage:Readonly<string> = 'Journals';\n\nconst storeJournal = storeString((val) => setItem(journalStorage, val))\n\nexport const getJournals = mkGetJournals(getItem(journalStorage));\nexport const addJournal = mkAddJournal(getJournals)(storeJournal);\nexport const updateJournal = mkUpdateJournal(getJournals)(storeJournal);\nexport const removeJournal = mkRemoveJournal(getJournals)(storeJournal);","import * as F from 'fp-ts/function';\nimport * as R from 'fp-ts/Record';\nimport * as O from 'fp-ts/Option';\n\ninterface match {\n    <P extends Matchable, B extends any>(patterns: P, d: B): (value: Key) => B;\n}\n\nexport interface Matchable {\n    [key: string]: any;\n}\n\ntype Key = string\n\nexport const match:match = ( patterns, d ) => F.flow(\n    (val) => R.lookup(val)(patterns),\n    O.getOrElse(F.constant(d))\n);\n    \n","import React from 'react';\nimport * as Recompose from 'recompose';\nimport { InfoParams } from '../../App';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport styled from 'styled-components';\nimport * as AP from 'fp-ts/Apply';\nimport * as A from 'fp-ts/Array';\nimport * as F from 'fp-ts/function';\nimport * as O from 'fp-ts/Option';\nimport * as I from 'fp-ts/Identity';\nimport * as IO from 'fp-ts/IO';\nimport * as E from 'fp-ts/Either';\nimport { Background, Body, MaxWidth, Column, Link, Row, Hash } from '../../components';\nimport Header from '../../components/header';\nimport Footer from '../../components/footer';\nimport { findById as findPlantById } from '../../lib/plant';\nimport { findById as findJournalById } from '../../lib/journal'\nimport { getPlants } from '../../api/local/plant';\nimport { getJournals } from '../../api/local/journal';\nimport { \n    infoReducer, \n    defaultState, \n    LOADING,\n    ERROR, \n    FETCHED, \n    State, \n    Action } from '../../state/info';\nimport { trace } from '../../lib/debug';\nimport { getItem } from 'fp-ts-local-storage';\n\n// CONSTANTS\n\n// INTERFACES\ninterface Props extends React.PropsWithChildren<unknown>, \n                        Recompose.reducerProps<State, Action, 'state', 'dispatch'>, \n                        RouteComponentProps<InfoParams> {\n};\n\ntype PostInjectProps = Omit<\n    Props\n    , 'state'\n    | 'dispatch'>;\n// ALIASES\n\n// LOCAL COMPONENTS\n// Local Components\nconst ListItemBox = styled.div.attrs({\n    className: 'pv1'\n})``;\n\n// DEFAULT PROPS\n\n// COMPONENT\nconst Info = (props: Props) => (\n    <Background centerHorizontal>\n        <MaxWidth>\n            <Header title={\"Plant Info\"}/>\n            <Body>\n                <ListItemBox>\n                    <Column>\n                    <Link to={`/plants/${props.state.info?.id}`}>{props.state.info?.name}</Link>\n                    <Row>\n                        {\n                            A.map<string, JSX.Element>(\n                                (tag) => <Hash to={`/tags/${tag}`}>#{tag}</Hash>\n                            )(props.state.info?.tags ?? [])\n                        }\n                    </Row>\n                    </Column>\n                </ListItemBox>\n            </Body>\n            <Footer/>\n       </MaxWidth>\n    </Background>\n);\n\nconst program = Recompose.compose<Props, PostInjectProps>(\n    Recompose.withReducer('state', 'dispatch', infoReducer, defaultState),\n    Recompose.lifecycle<Props, unknown>({\n        componentDidMount(){\n            this.props.dispatch({type: LOADING, payload: {}});\n            F.pipe(\n                IO.Do,\n                IO.apS('plants', getPlants),\n                IO.apS('journals', getJournals),\n                IO.map(AP.sequenceS(E.Apply)),\n                IO.map(\n                    F.flow(\n                        E.fold(\n                            F.flow(\n                                e => trace(e as Error),\n                                _ => this.props.dispatch({ type: ERROR, payload: {error: 'There was an issue fetching plants'}})\n                            ),\n                            F.flow(\n                                I.bind('plant', ({plants}) => findPlantById(this.props.match.params.id)(plants)),\n                                I.bind('fjournals', ({journals}) => findJournalById(this.props.match.params.id)(journals)),\n                                ({plant, fjournals}) => AP.sequenceS(O.Apply)({plant, journals:fjournals}),\n                                O.fold(\n                                    () => this.props.dispatch({ type: ERROR, payload: { error: 'Couldn\\'t find a plant with that id' }}),\n                                    F.flow(\n                                        I.chainFirst(({plant}) => F.constant(this.props.dispatch({ type: FETCHED, payload: { info: plant } } ))),\n                                        I.chain(({journals}) => this.props.dispatch({ type: FETCHED, payload: { info: journals } } ))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )();\n        }\n    })\n);\n\nexport default withRouter(program(Info));","import React from 'react';\nimport * as Recompose from 'recompose';\nimport { InfoParams } from '../../App';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport styled from 'styled-components';\nimport * as S from 'fp-ts/string';\nimport * as A from 'fp-ts/Array';\nimport * as F from 'fp-ts/function';\nimport * as O from 'fp-ts/Option';\nimport * as IO from 'fp-ts/IO';\nimport * as E from 'fp-ts/Either';\nimport { withFormik, FormikProps, Form } from 'formik'\nimport * as Yup from 'yup';\nimport { Background, Body, MaxWidth, Column, Label, Submit, Input, TextArea, ErrorMessage } from '../../components';\nimport Header from '../../components/header';\nimport Footer from '../../components/footer';\nimport { findById, Status, statuses } from '../../lib/plant';\nimport { getPlants, addPlant } from '../../api/local/plant';\nimport { \n    infoReducer, \n    defaultState, \n    LOADING,\n    ERROR, \n    FETCHED, \n    State, \n    Action } from '../../state/info';\nimport { trace } from '../../lib/debug';\nimport { split } from 'fp-ts/lib/Choice';\n\n// CONSTANTS\nconst defaultForm:Form = {\n    name: '',\n    description: '',\n    status: 'Seed',\n    careRequirement: '',\n    sunRequirement: '',\n    soilRequirement: '',\n    tags: ''\n};\n\nconst schema = Yup.object().shape({\n    name: Yup.string().required().max(15, 'Name must be under 15 characters'),\n    description: Yup.string(),\n    status: Yup.string().required(),\n    careRequirement: Yup.string(),\n    sunRequirement: Yup.string(),\n    soilRequirement: Yup.string(),\n    tags: Yup.string()\n})\n\nconst namePlaceHolder = 'Enter Name';\nconst descriptionPlaceholder = 'Enter Description';\nconst careRequirementPlaceholder = 'Enter Care Requirements';\nconst sunRequirementPlaceholder = 'Enter Sun Requirements';\nconst soilRequirementPlaceholder = 'Enter Soil Requirements';\nconst tagPlaceHolder = 'Enter Tags (separate tags by a comma)';\n\n// INTERFACES\ninterface Props extends React.PropsWithChildren<unknown>, \n                        Recompose.reducerProps<State, Action, 'state', 'dispatch'>, \n                        RouteComponentProps<InfoParams>,\n                        FormikProps<Form> {\n};\n\ntype PostInjectProps = Omit<\n    Props\n    , 'state'\n    | keyof FormikProps<Form>\n    | 'dispatch'>;\n\ninterface Form {\n    name: string;\n    description: string;\n    status: Status;\n    careRequirement: string;\n    sunRequirement: string;\n    soilRequirement: string;\n    tags: string;\n}\n// ALIASES\n\n// LOCAL COMPONENTS\n\n// DEFAULT PROPS\n\n// COMPONENT\nconst Info = (props: Props) => (\n    <Background centerHorizontal>\n        <MaxWidth>\n            <Header title={\"New Plant\"}/>\n            <Body padded>\n                <Form onSubmit={props.handleSubmit}>\n                    <Column className={'pv2'}>\n                        <Label for='name'>Name</Label>\n                        <Input \n                            placeholder={namePlaceHolder} \n                            id='name' \n                            name='name'\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            aria-required\n                            aria-invalid={O.fold(\n                                F.constFalse,\n                                F.constTrue\n                            )(O.fromNullable(props.errors.name && props.touched.name))}\n                            required\n                        />\n                        { \n                            O.fold(\n                                F.constNull,\n                                F.constant(<ErrorMessage>{props.errors.name}</ErrorMessage>)\n                            )(O.fromNullable(props.errors.name && props.touched.name))\n                        }\n                        <Label for='description'>Description</Label>\n                        <TextArea \n                            placeholder={descriptionPlaceholder} \n                            id='description' \n                            name='description'\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            aria-invalid={O.fold(\n                                F.constFalse,\n                                F.constTrue\n                            )(O.fromNullable(props.errors.description && props.touched.description))}></TextArea>\n                        { \n                            O.fold(\n                                F.constNull,\n                                F.constant(<ErrorMessage>{props.errors.description}</ErrorMessage>)\n                            )(O.fromNullable(props.errors.description && props.touched.description))\n                        }\n                        <Label for='status'>Status</Label>\n                        <select \n                            id='status' \n                            name='status'\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            aria-invalid={O.fold(\n                                F.constFalse,\n                                F.constTrue\n                            )(O.fromNullable(props.errors.status && props.touched.status))}>\n                            <option value='Seed'>Seed</option>\n                            <option value='Sprout'>Sprout</option>\n                            <option value='Seedling'>Seedling</option>\n                            <option value='Vegetative'>Vegetative</option>\n                            <option value='Budding'>Budding</option>\n                            <option value='Flowering'>Flowering</option>\n                            <option value='Ripening'>Ripening</option>\n                            <option value='Dead/Dormant/Harvested'>Dead/Dormant/Harvested</option>\n                        </select>\n                        <Label for='careRequirement'>Care Requirements</Label>\n                        <TextArea \n                            placeholder={careRequirementPlaceholder} \n                            id='careRequirement' \n                            name='careRequirement'\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            aria-invalid={O.fold(\n                                F.constFalse,\n                                F.constTrue\n                            )(O.fromNullable(props.errors.careRequirement && props.touched.careRequirement))}></TextArea>\n                        { \n                            O.fold(\n                                F.constNull,\n                                F.constant(<ErrorMessage>{props.errors.careRequirement}</ErrorMessage>)\n                            )(O.fromNullable(props.errors.careRequirement && props.touched.careRequirement))\n                        }\n                        <Label for='sunRequirement'>Sun Requirements</Label>\n                        <TextArea \n                            placeholder={sunRequirementPlaceholder} \n                            id='sunRequirement' \n                            name='sunRequirement'\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            aria-invalid={O.fold(\n                                F.constFalse,\n                                F.constTrue\n                            )(O.fromNullable(props.errors.sunRequirement && props.touched.sunRequirement))}></TextArea>\n                        { \n                            O.fold(\n                                F.constNull,\n                                F.constant(<ErrorMessage>{props.errors.sunRequirement}</ErrorMessage>)\n                            )(O.fromNullable(props.errors.sunRequirement && props.touched.sunRequirement))\n                        }\n                        <Label for='soilRequirement'>Soil Requirements</Label>\n                        <TextArea \n                            placeholder={soilRequirementPlaceholder} \n                            id='soilRequirement' \n                            name='soilRequirement'\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            aria-invalid={O.fold(\n                                F.constFalse,\n                                F.constTrue\n                            )(O.fromNullable(props.errors.soilRequirement && props.touched.soilRequirement))}/>\n                        { \n                            O.fold(\n                                F.constNull,\n                                F.constant(<ErrorMessage>{props.errors.soilRequirement}</ErrorMessage>)\n                            )(O.fromNullable(props.errors.soilRequirement && props.touched.soilRequirement))\n                        }\n                        <Label for='tags'>Tags</Label>\n                        <TextArea \n                            placeholder={tagPlaceHolder} \n                            id='tags' \n                            name='tags'\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            aria-invalid={O.fold(\n                                F.constFalse,\n                                F.constTrue\n                            )(O.fromNullable(props.errors.tags && props.touched.tags))}></TextArea>\n                        { \n                            O.fold(\n                                F.constNull,\n                                F.constant(<ErrorMessage>{props.errors.tags}</ErrorMessage>)\n                            )(O.fromNullable(props.errors.tags && props.touched.tags))\n                        }\n                    </Column>\n                    <Submit value='Submit'/>\n                </Form>\n            </Body>\n            <Footer/>\n       </MaxWidth>\n    </Background>\n);\n\nconst withForm = withFormik<Props, Form>({\n    mapPropsToValues: F.constant(defaultForm),\n    validationSchema: schema,\n    handleSubmit: (v, props) => {\n        console.log({ \n            ...v,\n            status: F.pipe(\n                statuses,\n                A.findFirst<Status>((val) => S.Eq.equals(v.status, val)),\n                O.getOrElse(F.constant<Status>('Seed'))\n            ),\n            tags: A.map(S.trim)(v.tags.split(',')),\n        })\n        F.pipe(\n            addPlant({ \n                ...v,\n                status: F.pipe(\n                    statuses,\n                    A.findFirst<Status>((val) => S.Eq.equals(v.status, val)),\n                    O.getOrElse(F.constant<Status>('Seed'))\n                ),\n                tags: A.map(S.trim)(v.tags.split(',')),\n            }),\n            IO.map(F.flow(\n                E.getOrElseW(\n                    (e) => {\n                        console.log('done');\n                        props.props.dispatch({type: ERROR, payload: { error: 'Failed to submit data'}});\n                        console.log(e);                \n                    }\n                )\n            )),\n            IO.map(\n                () => console.log('done')\n            )\n        )()\n    }\n})\nconst program = Recompose.compose<Props, PostInjectProps>(\n    Recompose.withReducer('state', 'dispatch', infoReducer, defaultState),\n    Recompose.lifecycle<Props, unknown>({\n        componentDidMount(){\n            this.props.dispatch({type: LOADING, payload: {}});\n            F.pipe(\n                getPlants,\n                IO.map(\n                    E.fold(\n                        F.flow(\n                            e => trace(e as Error),\n                            _ => this.props.dispatch({ type: ERROR, payload: {error: 'There was an issue fetching plants'}})\n                        ),\n                        F.flow(\n                            findById(this.props.match.params.id),\n                            O.fold(\n                                () => this.props.dispatch({ type: ERROR, payload: { error: 'Couldn\\'t find a plant with that id' }}),\n                                plant => this.props.dispatch({ type: FETCHED, payload: { info: plant } } )\n                            )\n                        )\n                    )\n                )\n            )();\n        }\n    })\n);\n\nexport default withRouter(program(withForm(Info)));","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Splash from './pages/common/splash';\nimport Dashboard from './pages/common/dashboard';\nimport Info from './pages/plant/info';\nimport Create from './pages/plant/create';\nimport { v4 } from 'uuid'\nimport { create } from 'domain';\n\ninterface IdParam {\n  id: string\n};\n\nexport interface InfoParams extends IdParam {\n};\n\nexport interface EditParams extends IdParam {\n\n}\n\nconst MaxWidth = styled.div`\n  max-width: 800px;\n`;\n\n\nfunction App() {\n  return (\n      <Router>\n        <Switch>\n          <Route exact path='/'>\n            <Splash/>\n          </Route>\n          <Route exact path='/plants'>\n            <Dashboard/>\n          </Route>\n          <Route path='/plants/add'>\n            <Create/>\n          </Route>\n          <Route path='/plants/edit/:id'>\n            <div>Hello</div>\n          </Route>\n          <Route path='/plants/:id'>\n            <Info/>\n          </Route>\n          <Route path='/journal'>\n            <div>Hello</div>\n          </Route>\n          <Route path='/journal/add'>\n            <div>Hello</div>\n          </Route>\n          <Route path='/journal/edit/:id'>\n            <div>Hello</div>\n          </Route>\n          <Route path='/journal/:id'>\n            <div>Hello</div>\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport Splash from './pages/common/splash';\nimport theme from './theme';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App/>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}